{"version":3,"sources":["components/ChoiceWindow.js","utils/constans.js","components/App.js","components/Nampad.js","reportWebVitals.js","index.js"],"names":["ChoiceWnindow","choiceDenomination","isChoiceWindow","className","onClick","choiceCollectionDenominations","minDenomination","regex","denominations","Nampad","isNampad","amount","setAmount","onClickWithdraw","outstandingBalance","issuedBanknotes","React","useState","banknotesInATM","setBanknotesInATM","isInfoAboutTheBalance","setIsInfoAboutTheBalance","handleAmount","numberOfCommas","i","length","chekingAmountValidity","alert","useEffect","handleEnterClick","evt","key","document","addEventListener","removeEventListener","value","placeholder","type","onChange","target","replace","disabled","buttonNumber","textContent","remainingBanknotes","slice","copyOfTheSelectedSetOfBanknotes","Object","keys","reduce","accumulator","item","App","currentDenomination","setCurrentDenomination","withdrawnDenominations","setWithdrawnDenominations","setIssuedBanknotes","onChoiceWindow","setOnChoiceWindow","onNampad","setOnNampad","setOutstandingBalance","variantSetDenominations","Math","min","apply","lastDenomination","obj","restAmount","split","runNumber","tempWithdrawnDenominations","forEach","values","acc","el","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.61d3e23f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function ChoiceWnindow ({choiceDenomination, isChoiceWindow}) {\r\n    return (\r\n        <div className={`choiceWindow ${isChoiceWindow ? 'choiceWindow_open' : ''}`}>\r\n            <p className=\"choiceWindow__text\">выберите вариент купюр</p>\r\n            <ul className=\"choiceWindow__allOptions\" onClick={choiceDenomination}>\r\n                <li className=\"choiceWindow__option\">1</li>\r\n                <li className=\"choiceWindow__option\">2</li>\r\n                <li className=\"choiceWindow__option\">3</li>\r\n                <li className=\"choiceWindow__option\">4</li>\r\n                <li className=\"choiceWindow__option\">5</li>\r\n                <li className=\"choiceWindow__option\">6</li>\r\n            </ul>\r\n      </div>\r\n    )\r\n}","const regex = /[^\\d,]/;\r\n\r\nconst denominations ={\r\n    1 : {\r\n      5000: 100,\r\n      2000: 400,\r\n      1000: 1000,\r\n      500: 3000,\r\n      200: 5000,\r\n      100: 8000,\r\n      50: 10000\r\n    }, \r\n\r\n    2: {\r\n      5000: 476,\r\n      2000: 345,\r\n      1000: 6741,\r\n      500: 4362,\r\n      200: 234,\r\n      100: 1643,\r\n      50: 3450\r\n    },\r\n\r\n    3: {\r\n      5000: 234,\r\n      2000: 678,\r\n      1000: 845,\r\n      500: 2451,\r\n      200: 9654,\r\n      100: 2345,\r\n      50: 234\r\n    },\r\n\r\n    4: {\r\n      5000: 546,\r\n      2000: 562,\r\n      1000: 2543,\r\n      500: 4365,\r\n      200: 2154,\r\n      100: 124,\r\n      50: 342\r\n    },\r\n\r\n    5: {\r\n      5000: 2732,\r\n      2000: 347,\r\n      1000: 479,\r\n      500: 7556,\r\n      200: 3296,\r\n      100: 1257,\r\n      50: 3854\r\n    },\r\n    6: {\r\n      5000: 73,\r\n      2000: 147,\r\n      1000: 279,\r\n      500: 356,\r\n      200: 696,\r\n      100: 857,\r\n      50: 854\r\n    }\r\n}\r\n\r\nexport {regex, denominations}","import React from 'react';\nimport ChoiceWindow from'./ChoiceWindow.js'\nimport Nampad from './Nampad.js';\nimport {denominations} from '../utils/constans.js'\n\nlet choiceCollectionDenominations\nlet minDenomination\n\n//Копия выбранного набора купюр с нулевым количеством купюр\nfunction copyOfTheSelectedSetOfBanknotes() {\n  return Object.keys(choiceCollectionDenominations)\n    .reduce((accumulator, item) => ({...accumulator, [item]: 0}), {})\n}\n\nexport default function App() {\n  const [amount, setAmount] = React.useState('');\n  const [currentDenomination, setCurrentDenomination] = React.useState('')\n  const [withdrawnDenominations, setWithdrawnDenominations] = React.useState({})\n  const [issuedBanknotes, setIssuedBanknotes] = React.useState(0) \n  const [onChoiceWindow, setOnChoiceWindow] = React.useState(true)\n  const [onNampad, setOnNampad] = React.useState(false)\n  const [outstandingBalance, setOutstandingBalance] = React.useState(0)\n\n  //округление суммы - отброс цифр после зпятых\n  function roundAmount() {\n    return amount.split(',')[0]\n  }\n\n  //выдача введенной суммы\n  function onClickWithdraw() {\n    let lastDenomination\n    let restAmount = roundAmount();\n    let runNumber = 0;\n    let tempWithdrawnDenominations = {...withdrawnDenominations};\n    \n    while (restAmount >= minDenomination) {\n      // eslint-disable-next-line no-loop-func\n      Object.keys(choiceCollectionDenominations).forEach((item) => {\n        if (currentDenomination && runNumber === 0 && item >= currentDenomination) {\n          return\n        }\n        \n        if (choiceCollectionDenominations[item] - withdrawnDenominations[item] === 0) {\n          return\n        }\n\n        if (restAmount < item) {\n          return\n        }\n\n        restAmount = restAmount - item\n        lastDenomination = item\n        tempWithdrawnDenominations[item] = tempWithdrawnDenominations[item] + 1\n      })\n\n      runNumber = runNumber + 1\n    }\n    \n    setCurrentDenomination(lastDenomination)\n    setWithdrawnDenominations(copyOfTheSelectedSetOfBanknotes())\n    setOutstandingBalance(restAmount % 50)\n    setAmount('')\n    \n    for (let key in choiceCollectionDenominations) {\n      choiceCollectionDenominations[key] -= tempWithdrawnDenominations[key]\n    }\n\n    setIssuedBanknotes(withdrawBanknotes(tempWithdrawnDenominations))\n  }\n\n  //выбор варианта набора купюр\n  function choiceDenomination(evt) {\n      const variantSetDenominations = evt.target.textContent\n      choiceCollectionDenominations = (denominations[variantSetDenominations])\n      minDenomination = Math.min.apply(null, Object.keys(choiceCollectionDenominations))\n\n      setOnChoiceWindow(false)\n      setOnNampad(true)\n      setWithdrawnDenominations(copyOfTheSelectedSetOfBanknotes())\n    }\n\n    //общее кол-во выданных купюр\n    function withdrawBanknotes(obj) {\n      return Object.values(obj).reduce((acc,el)=>{\n        return acc+Number(el)\n      }, 0)\n    }\n\n    \n  return (\n    <div className=\"page\">\n      <ChoiceWindow\n        choiceDenomination ={choiceDenomination}\n        isChoiceWindow = {onChoiceWindow}\n      />\n\n      <Nampad\n        isNampad={onNampad}\n        setAmount={setAmount}\n        amount={amount}\n        onClickWithdraw={onClickWithdraw}\n        outstandingBalance={outstandingBalance}\n        issuedBanknotes={issuedBanknotes}\n        choiceCollectionDenominations={choiceCollectionDenominations}\n      />\n    </div>\n  );\n}","import React from 'react';\r\nimport {regex} from '../utils/constans.js'\r\n\r\nexport default function Nampad ({choiceCollectionDenominations, isNampad, amount, setAmount, onClickWithdraw, outstandingBalance, issuedBanknotes}) {\r\n\r\n    const [banknotesInATM, setBanknotesInATM] = React.useState('')\r\n    const [isInfoAboutTheBalance, setIsInfoAboutTheBalance] = React.useState(false)\r\n    \r\n    React.useEffect(()=>{\r\n        function handleEnterClick (evt) {\r\n            if (evt.key===\"Enter\")\r\n            handleAmount()\r\n        }\r\n        document.addEventListener('keydown', handleEnterClick)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleEnterClick) \r\n        }\r\n    })\r\n\r\n    //отграничение ввода символов кроме 0-9 и ,\r\n    function entryBan (evt) {\r\n      let value = evt.target.value;\r\n      setAmount(value.replace(regex, ''))\r\n    }\r\n\r\n    //клик на кнопки клавиатуры для ввода суммы\r\n    function onClickButtonKeybord(evt) {\r\n        let buttonNumber = evt.target.textContent\r\n        setAmount(amount += buttonNumber)\r\n    }\r\n\r\n    //проверка на виладность введенной суммы - кол-во запятых\r\n    function chekingAmountValidity() {\r\n        let numberOfCommas = 0;\r\n        for (let i=0; i<amount.length; i++) {\r\n            if(amount[i] === ',' || amount[0] === ',') {\r\n                numberOfCommas += 1\r\n            }\r\n        }\r\n        \r\n        return numberOfCommas\r\n    }\r\n\r\n    //обработчик суммы\r\n    function handleAmount() {\r\n        let numberOfCommas = chekingAmountValidity();\r\n        if (numberOfCommas>1) {\r\n            alert('Некорректная сумма')\r\n        } else {\r\n            onClickWithdraw()\r\n        }\r\n    }\r\n\r\n    //удаления последнего симовла суммы\r\n    function adjustmentAmount() {\r\n        setAmount(amount.slice(0, -1))\r\n    }\r\n    \r\n    //вызов информации об оставшихся купюрах в банкомате\r\n    function callingInformationAboutTheAvailabilityOfBanknotes() {\r\n        let remainingBanknotes = 'Осталось купюр: '\r\n        for (let key in choiceCollectionDenominations) {\r\n            remainingBanknotes += `номинал ${key}-${choiceCollectionDenominations[key]}штук, `\r\n        }\r\n        if(banknotesInATM !== '') {\r\n            setBanknotesInATM('')\r\n            setIsInfoAboutTheBalance(false)\r\n        } else {\r\n            setBanknotesInATM(remainingBanknotes)\r\n            setIsInfoAboutTheBalance(true)\r\n        }\r\n    }\r\n    //Очистить поле ввода для суммы\r\n    function clearAmount() {\r\n        setAmount('')\r\n    }\r\n\r\n    return (\r\n        <div className={`nampad ${isNampad ? 'nampad_open' : ''}`}>\r\n            <p className={`nampad__text ${isInfoAboutTheBalance ? 'nampad__text_open' : ''}`}>{banknotesInATM}</p>\r\n            <input className=\"nampad__input\" value={amount} placeholder=\"Введите сумму для снятия\"  type=\"text\" onChange={entryBan}/>\r\n            <input className=\"nampad__input\" value = {`Выдано купюр: ${issuedBanknotes}`} type=\"text\" disabled/>\r\n            <input className=\"nampad__input\" value={`Невыданный остаток: ${outstandingBalance} руб.`} type=\"text\" disabled/>\r\n            \r\n            <div className=\"nampad__keyboard\" onClick={onClickButtonKeybord}>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">1</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">2</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">3</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">4</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">5</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">6</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">7</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">8</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">9</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\"></button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">0</button>\r\n                <button type=\"button\" className=\"nampad__keyboard-button\">,</button>\r\n            </div>\r\n            <div className=\"nampad__interaction\">\r\n                <button type=\"button\" className=\"nampad__interaction-button\" onClick={clearAmount}>Отмена</button>\r\n                <button type=\"button\" className=\"nampad__interaction-button\" onClick={callingInformationAboutTheAvailabilityOfBanknotes}>Справка</button> \r\n                <button type=\"button\" className=\"nampad__interaction-button\" onClick={adjustmentAmount}>Корректировка</button> \r\n                <button type=\"button\" className=\"nampad__interaction-button\" onClick={handleAmount}>Выдать</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}